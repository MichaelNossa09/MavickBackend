// <auto-generated />
using System;
using MavickBackend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Test2.Migrations
{
    [DbContext(typeof(MavickDBContext))]
    partial class EccomerceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Test2.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("direction");

                    b.Property<int>("Postalcode")
                        .HasColumnType("int")
                        .HasColumnName("postalcode");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Cart", b =>
                {
                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("idProduct");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("idUser");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdUser");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Test2.Models.CategoryProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("idCategory");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("idProduct");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdProduct");

                    b.ToTable("CategoryProduct", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Concept", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("idProduct");

                    b.Property<int>("IdSale")
                        .HasColumnType("int")
                        .HasColumnName("idSale");

                    b.Property<decimal>("Import")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("import");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdSale");

                    b.ToTable("Concept", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("photo");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("idUser");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("total");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("Sale", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Size", (string)null);
                });

            modelBuilder.Entity("Test2.Models.SizeProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("IdProduct")
                        .HasColumnType("int")
                        .HasColumnName("idProduct");

                    b.Property<int>("IdSize")
                        .HasColumnType("int")
                        .HasColumnName("idSize");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdSize");

                    b.ToTable("SizeProduct", (string)null);
                });

            modelBuilder.Entity("Test2.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Photo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("photo");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("Role");

                    b.HasIndex(new[] { "Email" }, "Email_Unique")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Test2.Models.UserAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("IdAddress")
                        .HasColumnType("bigint")
                        .HasColumnName("idAddress");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("idUser");

                    b.HasKey("Id");

                    b.HasIndex("IdAddress");

                    b.HasIndex("IdUser");

                    b.ToTable("UserAddress", (string)null);
                });

            modelBuilder.Entity("Test2.Models.Cart", b =>
                {
                    b.HasOne("Test2.Models.Product", "IdProductNavigation")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Product");

                    b.HasOne("Test2.Models.User", "IdUserNavigation")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_User");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Test2.Models.CategoryProduct", b =>
                {
                    b.HasOne("Test2.Models.Category", "IdCategoryNavigation")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryProduct_Category");

                    b.HasOne("Test2.Models.Product", "IdProductNavigation")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryProduct_Product");

                    b.Navigation("IdCategoryNavigation");

                    b.Navigation("IdProductNavigation");
                });

            modelBuilder.Entity("Test2.Models.Concept", b =>
                {
                    b.HasOne("Test2.Models.Product", "IdProductNavigation")
                        .WithMany("Concepts")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_Concept_Product");

                    b.HasOne("Test2.Models.Sale", "IdSaleNavigation")
                        .WithMany("Concepts")
                        .HasForeignKey("IdSale")
                        .IsRequired()
                        .HasConstraintName("FK_Concept_Sale");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdSaleNavigation");
                });

            modelBuilder.Entity("Test2.Models.Sale", b =>
                {
                    b.HasOne("Test2.Models.User", "IdUserNavigation")
                        .WithMany("Sales")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Sale_User");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Test2.Models.SizeProduct", b =>
                {
                    b.HasOne("Test2.Models.Product", "IdProductNavigation")
                        .WithMany("SizeProducts")
                        .HasForeignKey("IdProduct")
                        .IsRequired()
                        .HasConstraintName("FK_SizeProduct_Product");

                    b.HasOne("Test2.Models.Size", "IdSizeNavigation")
                        .WithMany("SizeProducts")
                        .HasForeignKey("IdSize")
                        .IsRequired()
                        .HasConstraintName("FK_SizeProduct_Size");

                    b.Navigation("IdProductNavigation");

                    b.Navigation("IdSizeNavigation");
                });

            modelBuilder.Entity("Test2.Models.User", b =>
                {
                    b.HasOne("Test2.Models.Role", "RoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Role")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("Test2.Models.UserAddress", b =>
                {
                    b.HasOne("Test2.Models.Address", "IdAddressNavigation")
                        .WithMany("UserAddresses")
                        .HasForeignKey("IdAddress")
                        .IsRequired()
                        .HasConstraintName("FK_UserAddress_Address");

                    b.HasOne("Test2.Models.User", "IdUserNavigation")
                        .WithMany("UserAddresses")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_UserAddress_User");

                    b.Navigation("IdAddressNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Test2.Models.Address", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Test2.Models.Category", b =>
                {
                    b.Navigation("CategoryProducts");
                });

            modelBuilder.Entity("Test2.Models.Product", b =>
                {
                    b.Navigation("CategoryProducts");

                    b.Navigation("Concepts");

                    b.Navigation("SizeProducts");
                });

            modelBuilder.Entity("Test2.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Test2.Models.Sale", b =>
                {
                    b.Navigation("Concepts");
                });

            modelBuilder.Entity("Test2.Models.Size", b =>
                {
                    b.Navigation("SizeProducts");
                });

            modelBuilder.Entity("Test2.Models.User", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
